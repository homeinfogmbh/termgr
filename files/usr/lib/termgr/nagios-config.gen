#! /usr/bin/env python3
"""Generate Nagios3 client configurations
from HOMEINFO terminal records
"""

from os.path import join
from homeinfo.lib.system import run, evaluate
from homeinfo.terminals.db import Terminal, Class
from termgr.config import monitoring

__author__ = 'Richard Neumann <r.neumann@homeinfo.de>'
__date__ = '22.04.2015'


def mkhosts():
    """Generates host configurations"""

    def render(tid, cid, template, host_name, alias, address):
        """Renders the template with the respective data"""
        rendered = template.replace('%TID%', str(tid))
        rendered = rendered.replace('%CID%', str(cid))
        rendered = rendered.replace('%HOST_NAME%', host_name)
        rendered = rendered.replace('%ALIAS%', alias)
        rendered = rendered.replace('%ADDRESS%', address)
        rendered = rendered.replace('%OS%', 'linux')  # TODO: Make dynamic
        return rendered

    conf_path = join(monitoring['CONF_DIR'], monitoring['HOSTS_FILE_NAME'])

    with open('/usr/share/termgr/nagios.terminal.temp', 'r') as temp:
        template = temp.read()

    data = '\n'.join([' '.join(['# Generated by', __file__]),
                      '# DO NOT EDIT THIS FILE MANUALLY!\n\n'])

    for terminal in Terminal.select().where(Terminal.deleted >> None):
        tid = terminal.tid
        cid = terminal.cid
        host_name = terminal.hostname
        alias = repr(terminal.location)
        address = str(terminal.ipv4addr)
        data += '\n# ' + host_name
        data += '\n'
        data += render(tid, cid, template, host_name, alias, address)
        data += '\n'

    with open(conf_path, 'w') as cfg:
        cfg.write(data)


def mkgroups():
    """Generates hostgroup configurations"""

    def render(template, name, full_name, memebers):
        """Renders host groups"""
        if members:
            rendered = template.replace('%NAME%', name)
            rendered = rendered.replace('%FULL_NAME%', full_name)
            rendered = rendered.replace('%MEMBERS%', ','.join(memebers))
            return rendered
        else:
            return ''

    conf_path = join(monitoring['CONF_DIR'], monitoring['GROUPS_FILE_NAME'])

    with open('/usr/share/termgr/nagios.hostgroup.temp', 'r') as temp:
        template = temp.read()

    data = '\n'.join([' '.join(['# Generated by', __file__]),
                      '# DO NOT EDIT THIS FILE MANUALLY!\n\n'])

    # Class groups
    for class_ in Class.select().where(True):
        members = []
        for terminal in class_.terminals:
            if not terminal.deleted:
                member = str(terminal.hostname)
                members.append(member)

        name = class_.name
        full_name = class_.full_name
        rendered = render(template, name, full_name, members)
        if rendered:
            data += ''.join(['\n# ', full_name, '\n', rendered, '\n'])

    # Customer groups
    customers = {}
    # Fetch customers
    for terminal in Terminal.select().where(Terminal.deleted >> None):
        if terminal.customer.id in customers:
            customers[terminal.customer.id][1].append(terminal)
        else:
            customers[terminal.customer.id] = [terminal.customer, [terminal]]
    # Fetch member terminals
    for cid in customers:
        customer = customers[cid][0]
        members = [str(terminal.hostname) for terminal in customers[cid][1]]
        name = str(customer.id)
        full_name = customer.name
        rendered = render(template, name, full_name, members)
        if rendered:
            data += ''.join(['\n# ', full_name, '\n', rendered, '\n'])

    with open(conf_path, 'w') as cfg:
        cfg.write(data)

mkhosts()
mkgroups()
print('Restarting nagios3 service', end='              ')
evaluate(run('systemctl restart nagios3.service', shell=True))
