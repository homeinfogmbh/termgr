#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals

Usage:
    termadm add <class_id> <cid> <os> [<street> <house_number> <zip_code> \
<city> [--state=<state_iso>]] [options]
    termadm deploy <expr>... [--date=<date_string> [--format=<date_format>]] \
[--force]
    termadm undeploy <expr>...
    termadm (grant | revoke) <operator> <expr>

Options:
    -h --help                   Show this screen.
    --version                   Show version.
    --domain=<domain>           Specify the domain [default: 1].
    --connection=<connection>   Specify connection type [default: 1].
    --tid=<tid>                 Explicitly select a TID (not recommended!).
    --key=<key>                 Explicitly specify an OpenVPN key to be used.
    --annotation=<annotation>   Specify an annotation for this terminal.
"""

from os import geteuid
from sys import stderr
from os.path import basename
from itertools import chain
from datetime import datetime
from logging import INFO, getLogger, basicConfig

from docopt import docopt

from homeinfo.lib.system import run, evaluate
from homeinfo.crm import Address, State
from homeinfo.terminals.orm import Class, Domain, OS, VPN, Connection, \
    Terminal, Operator, OperatorTerminals
from homeinfo.terminals.filter import TerminalFilter


def update_nagios():
    """Generates the Nagios3 configuration"""

    print('Creating Nagios3 configurations', end='         ', flush=True)
    evaluate(run('/usr/lib/terminals/nagioscfg-gen'))


def update_config():
    """Fix stuff after operations"""

    print('Generating bind9 configuration', end='          ', flush=True)
    evaluate(run('/usr/lib/terminals/bindcfg-gen'))
    print('Generating OpenVPN host configurations', end='  ', flush=True)
    evaluate(run('/usr/lib/terminals/openvpncfg-gen'))
    update_nagios()


if __name__ == '__main__':
    logger = getLogger(basename(__file__))
    options = docopt(__doc__)

    basicConfig(level=INFO)

    try:
        reload = not options['--no-reload']
    except KeyError:
        reload = False

    simulate = options['--simulate']

    # Bail out iff reload of services
    # is required, but we are not root.
    if options['add'] or options['deploy'] or options['undeploy']:
        if geteuid() != 0:
            print('You must be root to update the related services')
            exit(3)

    # Parse operation modes
    if options['add']:
        # Required options
        tid = int(options['--tid']) if options['--tid'] else None
        cid = int(options['<cid>'])
        class_id = int(options['<class_id>'])
        os_id = int(options['<os>'])
        connection_id = int(options['--connection'])

        # Optional address
        street = options['<street>']
        house_number = options['<house_number>']
        zip_code = options['<zip_code>']
        city = options['<city>']
        state_iso = options['--state']
        if street:
            address = (street, house_number, zip_code, city, state_iso)
        else:
            address = None

        # Optional parameters
        vpn_key = options['--key'] or None
        annotation = options['--annotation'] or None

        # Add new terminal
        Terminal.add(
            cid, class_id, os_id, connection_id,
            address=address, vpn_key=vpn_key,
            annotation=annotation, tid=tid)
        update_config()

    elif options['deploy']:
        exprs = options['<expr>']
        date_string = options['--date']
        force = options['--force']

        if date_string:
            date_format = options['--format'] or '%Y-%m-%d'
            try:
                date_time = datetime.strptime(date_string, date_format)
            except ValueError:
                logger.error(
                    'Invalid date time value ({0}) or format ({0})'.format(
                        date_string, date_format))
                exit(4)
        else:
            date_time = None

        for expr in exprs:
            for terminal in TerminalFilter(expr):
                terminal.deploy(date_time=dat_time)

        update_nagios()

    elif options['undeploy']:
        exprs = options['<expr>']
        for expr in exprs:
            for terminal in TerminalFilter(expr):
                terminal.undeploy()
        update_nagios()

    elif options['grant']:
        operator = Operator.get(Operator.name == options['<operator>'])
        for terminal in TerminalFilter(options['<expr>']):
            operator.grant(terminal)

    elif options['revoke']:
        operator = Operator.get(Operator.name == options['<operator>'])
        for terminal in TerminalFilter(options['<expr>']):
            operator.revoke(terminal)
