#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals

Usage:
    termadm add <class_id> <cid> <os> [<street> <house_number> <zip_code> \
<city> [--state=<state_iso>] [--address-annotation=<address_annotation>]] \
[options]
    termadm deploy <expr>... [--date=<date_string> [--format=<date_format>]] \
[--force]
    termadm undeploy <expr>...
    termadm permit <permissions> <user> <expr>...

Options:
    -h --help                   Show this screen.
    --version                   Show version.
    --domain=<domain>           Specify the domain [default: 1].
    --connection=<connection>   Specify connection type [default: 1].
    --tid=<tid>                 Explicitly select a TID (not recommended!).
    --key=<key>                 Explicitly specify an OpenVPN key to be used.
    --annotation=<annotation>   Specify an annotation for this terminal.
"""

from os import geteuid
from sys import stderr
from os.path import basename
from itertools import chain
from datetime import datetime
from logging import INFO, getLogger, basicConfig

from docopt import docopt

from homeinfo.lib.system import run, evaluate
from homeinfo.crm import Address, State
from homeinfo.terminals.orm import Class, Domain, OS, VPN, Connection, \
    Terminal
from homeinfo.terminals.filter import TerminalFilter

from termgr.orm import PermissionError, User


def update_nagios():
    """Generates the Nagios3 configuration"""

    print('Creating Nagios3 configurations', end='         ', flush=True)
    evaluate(run('/usr/lib/terminals/nagioscfg-gen'))


def update_config():
    """Fix stuff after operations"""

    print('Generating bind9 configuration', end='          ', flush=True)
    evaluate(run('/usr/lib/terminals/bindcfg-gen'))

    print('Generating OpenVPN host configurations', end='  ', flush=True)
    evaluate(run('/usr/lib/terminals/openvpncfg-gen'))
    update_nagios()


def permissions(s):
    """Parse permissions"""
    binary = False

    # Check for binary string
    if len(s) == 3:
        for char in s:
            if char not in ['0', '1']:
                break
        else:
            binary = True

    if not binary:
        try:
            permissions = int(s)
        except ValueError:
            alter = None

            if s.startswith('+'):
                alter = True
                permissions = s[1:]
            elif s.startswith('-'):
                alter = False
                permissions = s[1:]
            else:
                permissions = s

            for permission in permissions:
                permission = permission.lower()

                # Alter permissions
                if alter is None:
                    read = False
                    administer = False
                    setup = False
                # Set permissions
                else:
                    read = None
                    administer = None
                    setup = None

                if permission == 'r':
                    read = alter
                elif permission == 'a':
                    administer = alter
                elif permission == 's':
                    setup = alter
                else:
                    raise PermissionError(
                        'Invalid permission: {}'.format(permission))

        else:
            permissions = bin(permissions)[2:]
            binary = True

    if binary:
        read = permissions[0] == '1'
        administer = permissions[1] == '1'
        setup = permissions[2] == '1'

    return (read, administer, setup)


if __name__ == '__main__':
    logger = getLogger(basename(__file__))
    options = docopt(__doc__)

    basicConfig(level=INFO)

    try:
        reload = not options['--no-reload']
    except KeyError:
        reload = False

    # Bail out iff reload of services
    # is required, but we are not root.
    if options['add'] or options['deploy'] or options['undeploy']:
        if geteuid() != 0:
            print('You must be root to update the related services')
            exit(3)

    # Add new terminal
    if options['add']:
        # Required options
        tid = int(options['--tid']) if options['--tid'] else None
        cid = int(options['<cid>'])
        class_id = int(options['<class_id>'])
        os_id = int(options['<os>'])
        connection_id = int(options['--connection'])
        domain_id = int(options['--domain'])

        # Optional address
        street = options['<street>']
        house_number = options['<house_number>']
        zip_code = options['<zip_code>']
        city = options['<city>']
        state_iso = options['--state']

        if street:
            addr = (street, house_number, zip_code)
        else:
            addr = None

        address_annotation = options['--address-annotation']

        # Optional parameters
        vpn_key = options['--key'] or None
        annotation = options['--annotation'] or None

        # Get related ORM instances
        class_ = Class.get(Class.id == class_id)
        os = OS.get(OS.id == os_id)
        connection = Connection.get(Connection.id == connection_id)
        vpn = VPN.add(key=vpn_key)
        domain = Domain.get(Domain.id == domain_id)

        if addr is not None:
            address = Address.add(cls, city, addr=addr, state=None)
            location = Location.add(address, annotation=address_annotation)
        else:
            location = None

        # Add new terminal
        terminal = Terminal.add(
            cid, class_, os, connection, vpn, domain,
            location=location, tid=tid)

        if terminal:
            logger.info('Added terminal {0}'.format(terminal))
        else:
            logger.error('Failed to add terminal')

        update_config()

    # Deploy terminal
    elif options['deploy']:
        date_string = options['--date']
        force = options['--force']

        if date_string:
            date_format = options['--format'] or '%Y-%m-%d'

            try:
                date_time = datetime.strptime(date_string, date_format)
            except ValueError:
                logger.error(
                    'Invalid date time value ({0}) or format ({0})'.format(
                        date_string, date_format))
                exit(4)
        else:
            date_time = None

        for expr in options['<expr>']:
            for terminal in TerminalFilter(expr):
                terminal.deploy(date_time=date_time, force=force)

        update_nagios()

    # Undeploy terminal
    elif options['undeploy']:
        for expr in options['<expr>']:
            for terminal in TerminalFilter(expr):
                terminal.undeploy(force=force)

        update_nagios()

    # Set user permissions
    elif options['permit']:
        read, administer, setup = permissions(options['<permissions>'])
        user = User.get(User.name == options['<user>'])

        for expr in options['<expr>']:
            for terminal in TerminalFilter(expr):
                try:
                    user.permit(
                        terminal,
                        read=read,
                        administer=administer,
                        setup=setup)
                except PermissionError as pe:
                    logger.warning(pe.msg)
