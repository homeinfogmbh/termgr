#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals

Usage:
    termadm add <class_id> <cid> <os> [<street> <house_number> <zip_code> \
<city> [--state=<state_iso>]] [options]
    termadm (deploy | undeploy) <expr>...
    termadm (grant | revoke) <operator> <expr>

Options:
    -h --help                   Show this screen.
    --version                   Show version.
    --domain=<domain>           Specify the domain [default: 1].
    --connection=<connection>   Specify connection type [default: 1].
    --tid=<tid>                 Explicitly select a TID (not recommended!).
    --key=<key>                 Explicitly specify an OpenVPN key to be used.
    --annotation=<annotation>   Specify an annotation for this terminal.
    --no-restart                Do not restart related system services.
"""

from os import geteuid
from itertools import chain
from datetime import datetime

from docopt import docopt

from homeinfo.lib.system import run, evaluate
from homeinfo.crm import Address, State
from homeinfo.terminals.orm import Class, Domain, OS, VPN, Connection, \
    Terminal, Operator, OperatorTerminals
from homeinfo.terminals.filter import TerminalFilter


def add_terminal(options):
    """Adds a new terminal"""
    # Required options
    class_ = Class.get(Class.id == int(options['<class_id>']))
    cid = int(options['<cid>'])
    tid = int(options['--tid']) if options['--tid'] else None
    os = OS.get(OS.id == int(options['<os>']))
    # Optional address
    street = options['<street>']
    house_number = options['<house_number>']
    zip_code = options['<zip_code>']
    city = options['<city>']
    state_iso = options['--state']
    # Optional options
    vpn_key = options['--key']
    annotation = options['--annotation']
    restart = not options['--no-restart']
    connection = Connection.get(Connecion.id == int(options['--connection']))
    domain = Domain.get(Domain.id == int(options['--domain']))
    tid = Terminal.gen_tid(cid, desired=tid)
    if state_iso:
        state = State.get(State._iso == state_iso)
    else:
        state = None
    addr = (street, house_number, zip_code)
    if None not in chain([city], addr):
        address = Address.add(city, addr=addr, state=state)
    else:
        address = None
    terminal = Terminal()
    terminal.tid = tid
    terminal.customer = cid
    terminal.class_ = class_
    terminal.os = os
    terminal.connection = connection
    terminal.vpn = VPN.add(key=vpn_key)
    terminal.domain = domain
    terminal.location = address
    terminal.vid = None
    terminal.deployed = None
    terminal.deleted = None
    terminal.testing = False
    terminal.annotation = annotation
    if vpn_key is None:
        print('Warning: No OpenVPN key was specified!')
    else:
        terminal.vpn_key = vpn_key
    terminal.save()
    print('Created terminal record for host name:', terminal.hostname,
          'with id:', terminal.id)
    if restart:
        restart_services()


def deploy_terminal(terminal):
    """Sets terminals to deployed"""
    if terminal.deployed is None:
        now = datetime.now()
        print('Deploying terminal {0} on {1}'.format(terminal, now))
        terminal.deployed = now
        terminal.save()
    else:
        print('Terminal {0} has already been deployed on {1}'.format(
            terminal, terminal.deployed))


def undeploy_terminal(terminal):
    """Sets terminals to NOT deployed"""
    if terminal.deployed is None:
        print('Terminal {0} is not deployed'.format(terminal))
    else:
        print('Undeploying terminal {0} from {1}'.format(
            terminal, terminal.deployed))
        terminal.deployed = None
        terminal.save()


def grant_setup(operator, terminals):
    """Grant an operator permission to set up certain terminals"""
    for terminal in terminals:
        permission = OperatorTerminals()
        permission.operator = operator
        permission.terminal = terminal
        print(
            'Granting setup permission of terminal '
            '{0} to operator {1}'.format(
                str(terminal), str(operator)), end='\t')
        if permission.save():
            print('[   ok   ]', flush=True)
        else:
            print('[ failed ]', flush=True)


def revoke_setup(operator, terminals):
    """Revoke an operator permission to set up certain terminals"""
    for terminal in terminals:
        print(
            'Revoking setup permission of terminal '
            '{0} to operator {1}:'.format(
                str(terminal), str(operator)))
        for permission in OperatorTerminals.select().where(
                (OperatorTerminals.operator == operator) &
                (OperatorTerminals.terminal == terminal)):
            print('\t', permission.id, end='\t')
            if permission.delete_instance():
                print('[   ok   ]', flush=True)
            else:
                print('[ failed ]', flush=True)


def generate_nagios():
    """Generates the Nagios3 configuration"""
    print('Creating Nagios3 configurations', end='         ', flush=True)
    evaluate(run('/usr/lib/terminals/nagios-config.gen'))


def restart_services():
    """Fix stuff after operations"""
    print('Generating bind9 configuration', end='          ', flush=True)
    evaluate(run('/usr/lib/terminals/bind.gen'))
    print('Generating OpenVPN host configurations', end='  ', flush=True)
    evaluate(run('/usr/lib/terminals/openvpn-client-config.gen'))
    generate_nagios()

if __name__ == '__main__':
    options = docopt(__doc__)
    if geteuid() == 0:
        if options['add']:
            add_terminal(options)
        elif options['deploy']:
            exprs = options['<expr>']
            for expr in exprs:
                for terminal in TerminalFilter(expr):
                    deploy_terminal(terminal)
            generate_nagios()
        elif options['undeploy']:
            exprs = options['<expr>']
            for expr in exprs:
                for terminal in TerminalFilter(expr):
                    undeploy_terminal(terminal)
            generate_nagios()
        elif options['grant']:
            operator = Operator.get(Operator.name == options['<operator>'])
            terminals = TerminalFilter(options['<expr>'])
            grant_setup(operator, terminals)
        elif options['revoke']:
            operator = Operator.get(Operator.name == options['<operator>'])
            terminals = TerminalFilter(options['<expr>'])
            revoke_setup(operator, terminals)
    else:
        print('You must be root to add new terminals')
        exit(3)
