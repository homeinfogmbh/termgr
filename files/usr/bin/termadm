#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals

Usage:
    termadm add <class_id> <cid> <os> [<street> <house_number> <zip_code> \
<city> [--state=<state_iso>]] [options]
    termadm (deploy | undeploy) <expr>... [--no-restart] [--force]
    termadm (grant | revoke) <operator> <expr>

Options:
    -h --help                   Show this screen.
    --version                   Show version.
    --domain=<domain>           Specify the domain [default: 1].
    --connection=<connection>   Specify connection type [default: 1].
    --tid=<tid>                 Explicitly select a TID (not recommended!).
    --key=<key>                 Explicitly specify an OpenVPN key to be used.
    --annotation=<annotation>   Specify an annotation for this terminal.
    --no-reload                 Do not reload related system services.
"""

from os import geteuid
from itertools import chain
from datetime import datetime

from docopt import docopt

from homeinfo.lib.system import run, evaluate
from homeinfo.crm import Address, State
from homeinfo.terminals.orm import Class, Domain, OS, VPN, Connection, \
    Terminal, Operator, OperatorTerminals
from homeinfo.terminals.filter import TerminalFilter


def add_terminal(tid, cid, class_id, os_id, connection_id,
                 address=None, vpn_key=None, annotation=None):
    """Adds a new terminal"""
    tid = Terminal.gen_tid(cid, desired=tid)
    class_ = Class.get(Class.id == class_id)
    os = OS.get(OS.id == os_id)
    connection = Connection.get(Connecion.id == connection_id)
    domain = Domain.get(Domain.id == int(options['--domain']))
    if state_iso:
        state = State.get(State._iso == state_iso)
    else:
        state = None
    if address is not None:
        try:
            street, house_number, zip_code, city, state_iso = address
        except ValueError:
            try:
                address = Address.get(Address.id == int(address))
            except (TypeError, ValueError, DoesNotExist):
                logger.error(
                    "Address is neither a valid tuple, nor a record's ID")
                address = None
        else:
            addr = (street, house_number, zip_code, city)
            address = Address.add(city, addr=addr, state=state_iso)
    else:
        logger.warning('No address specified')
        address = None
    terminal = Terminal()
    terminal.tid = tid
    terminal.customer = cid
    terminal.class_ = class_
    terminal.os = os
    terminal.connection = connection
    terminal.vpn = VPN.add(key=vpn_key)
    terminal.domain = domain
    terminal.location = address
    terminal.vid = None
    terminal.deployed = None
    terminal.deleted = None
    terminal.testing = False
    terminal.annotation = annotation
    if vpn_key is not None:
        logger.warning(
            'Divergent OpenVPN key specified: "{0}""!'.format(vpn_key))
        terminal.vpn_key = vpn_key
    else:
        terminal.vpn_key = None
    try:
        terminal.save()
    except Exception as e:
        logger.critical('Could not add new terminal record to database')
        if VERBOSE:
            logger.critical(str(e))
    else:
        logger.info('Created terminal record for host name\n\t"{0}"'
                    '\nwith record ID:\n\t{1}'.format(
                        terminal.hostname, terminal.id))
    if restart:
        restart_services()


def deploy_terminal(terminal):
    """Sets terminals to deployed"""
    if terminal.deployed is None:
        now = datetime.now()
        print('Deploying terminal {0} on {1}'.format(terminal, now))
        terminal.deployed = now
        terminal.save()
    else:
        print('Terminal {0} has already been deployed on {1}'.format(
            terminal, terminal.deployed))


def undeploy_terminal(terminal):
    """Sets terminals to NOT deployed"""
    if terminal.deployed is None:
        print('Terminal {0} is not deployed'.format(terminal))
    else:
        print('Undeploying terminal {0} from {1}'.format(
            terminal, terminal.deployed))
        terminal.deployed = None
        terminal.save()


def grant_setup(operator, terminals):
    """Grant an operator permission to set up certain terminals"""
    for terminal in terminals:
        print('Granting setup permission of terminal '
              '{0} to operator {1}'.format(
                str(terminal), str(operator)), end='\t')
        try:
            OperatorTerminals.get(
                (OperatorTerminals.operator == operator) &
                (OperatorTerminals.terminal == terminal))
        except DoesNotExist:
            permission = OperatorTerminals()
            permission.operator = operator
            permission.terminal = terminal
            if permission.save():
                print('[   ok   ]', flush=True)
            else:
                print('[ failed ]', flush=True)
        else:
            print('[ exists ]', flush=True)


def revoke_setup(operator, terminals):
    """Revoke an operator permission to set up certain terminals"""
    for terminal in terminals:
        print(
            'Revoking setup permission of terminal '
            '{0} to operator {1}:'.format(
                str(terminal), str(operator)))
        for permission in OperatorTerminals.select().where(
                (OperatorTerminals.operator == operator) &
                (OperatorTerminals.terminal == terminal)):
            print('\t', permission.id, end='\t')
            if permission.delete_instance():
                print('[   ok   ]', flush=True)
            else:
                print('[ failed ]', flush=True)


def generate_nagios():
    """Generates the Nagios3 configuration"""
    print('Creating Nagios3 configurations', end='         ', flush=True)
    evaluate(run('/usr/lib/terminals/nagios-config.gen'))


def restart_services():
    """Fix stuff after operations"""
    print('Generating bind9 configuration', end='          ', flush=True)
    evaluate(run('/usr/lib/terminals/bind.gen'))
    print('Generating OpenVPN host configurations', end='  ', flush=True)
    evaluate(run('/usr/lib/terminals/openvpn-client-config.gen'))
    generate_nagios()

if __name__ == '__main__':
    options = docopt(__doc__)
    reload = not options['--no-reload']

    # Bail out iff restart of services
    # is wanted, but we are not root.
    if restart:
        if geteuid() != 0:
            print('You must be root to restart the services')
            exit(3)

    # Parse operation modes
    if options['add']:
        # Required options
        tid = int(options['--tid']) if options['--tid'] else None
        cid = int(options['<cid>'])
        class_id = int(options['<class_id>'])
        os_id = int(options['<os>'])
        connection_id = int(options['--connection'])

        # Optional address
        street = options['<street>']
        house_number = options['<house_number>']
        zip_code = options['<zip_code>']
        city = options['<city>']
        state_iso = options['--state']
        if street:
            address = (street, house_number, zip_code, city, state_iso)
        else:
            address = None

        # Optional parameters
        vpn_key = options['--key'] or None
        annotation = options['--annotation'] or None

        add_terminal(tid, cid, class_id, os_id, connection_id,
                     address=address, vpn_key=vpn_key, annotation=annotation)
    elif options['deploy']:
        exprs = options['<expr>']
        for expr in exprs:
            for terminal in TerminalFilter(expr):
                deploy_terminal(terminal)
        generate_nagios()
    elif options['undeploy']:
        exprs = options['<expr>']
        for expr in exprs:
            for terminal in TerminalFilter(expr):
                undeploy_terminal(terminal)
        generate_nagios()
    elif options['grant']:
        operator = Operator.get(Operator.name == options['<operator>'])
        terminals = TerminalFilter(options['<expr>'])
        grant_setup(operator, terminals)
    elif options['revoke']:
        operator = Operator.get(Operator.name == options['<operator>'])
        terminals = TerminalFilter(options['<expr>'])
        revoke_setup(operator, terminals)
