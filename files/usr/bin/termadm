#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals

Usage:
    termadm add <class_id> <cid> <os> [<street> <house_number> <zip_code> \
<city> [--state=<state_iso>]] [--tid=<tid>] [--key=<key>] \
[--annotation=<annotation>] [--no-restart]
    termadm (deploy | undeploy) <expr>...

Options:
    -h --help     Show this screen.
    --version     Show version.
"""

from os import geteuid
from itertools import chain
from datetime import datetime

from docopt import docopt

from homeinfo.lib.system import run, evaluate
from homeinfo.crm import Address, State
from homeinfo.terminals.orm import Class, Domain, OS, VPN, Terminal
from homeinfo.terminals.filter import TerminalFilter


def add_terminal(options):
    """Adds a new terminal"""
    # Required options
    class_id = (options['<class_id>'])
    cid = int(options['<cid>'])
    tid = int(options['--tid']) if options['--tid'] else None
    os_id = int(options['<os>'])
    # Optional address
    street = options['<street>']
    house_number = options['<house_number>']
    zip_code = options['<zip_code>']
    city = options['<city>']
    state_iso = options['--state']
    # Optional options
    vpn_key = options['--key']
    annotation = options['--annotation']
    restart = not options['--no-restart']
    tid = Terminal.gen_tid(cid, desired=tid)
    class_ = Class.get(Class.id == class_id)
    os = OS.get(OS.id == os_id)
    domain = Domain.get(Domain.id == 1)  # TODO: Make this dynamic
    if state_iso:
        state = State.get(State._iso == state_iso)
    else:
        state = None
    addr = (street, house_number, zip_code)
    if None not in chain([city], addr):
        address = Address.add(city, addr=addr, state=state)
    else:
        address = None
    terminal = Terminal()
    terminal.tid = tid
    terminal.customer = cid
    terminal.class_ = class_
    terminal.os = os
    terminal.vpn = VPN.add(key=vpn_key)
    terminal.domain = domain
    terminal.location = address
    terminal.vid = None
    terminal.deployed = None
    terminal.deleted = None
    terminal.testing = False
    terminal.annotation = annotation
    if vpn_key is None:
        print('Warning: No OpenVPN key was specified!')
    else:
        terminal.vpn_key = vpn_key
    terminal.save()
    print('Created terminal record for host name:', terminal.hostname,
          'with id:', terminal.id)
    if restart:
        restart_services()


def deploy_terminal(terminal):
    """Sets terminals to deployed"""
    if terminal.deployed is None:
        now = datetime.now()
        print('Deploying terminal {0} in {1}'.format(terminal, now))
        terminal.deployed = now
        terminal.save()
    else:
        print('Terminal {0} has already been deployed on {1}'.format(
            terminal, terminal.deployed))


def undeploy_terminal(terminal):
    """Sets terminals to NOT deployed"""
    if terminal.deployed is None:
        print('Terminal {0} is not deployed')
    else:
        print('Undeploying terminal {0} from {1}'.format(
            terminal, terminal.deployed))
        terminal.deployed = None
        terminal.save()


def generate_nagios():
    """Generates the Nagios3 configuration"""
    print('Creating Nagios3 configurations', end='         ', flush=True)
    evaluate(run('/usr/lib/terminals/nagios-config.gen'))


def restart_services():
    """Fix stuff after operations"""
    print('Generating bind9 configuration', end='          ', flush=True)
    evaluate(run('/usr/lib/terminals/bind.gen'))
    print('Generating OpenVPN host configurations', end='  ', flush=True)
    evaluate(run('/usr/lib/terminals/openvpn-client-config.gen'))
    generate_nagios()

if __name__ == '__main__':
    options = docopt(__doc__)
    if geteuid() == 0:
        if options['add']:
            add_terminal(options)
        elif options['deploy']:
            exprs = options['<expr>']
            for expr in exprs:
                for terminal in TerminalFilter(expr):
                    deploy_terminal(terminal)
            generate_nagios()
        elif options['undeploy']:
            exprs = options['<expr>']
            for expr in exprs:
                for terminal in TerminalFilter(expr):
                    undeploy_terminal(terminal)
            generate_nagios()
    else:
        print('You must be root to add new terminals')
        exit(3)
