#! /usr/bin/env python3
"""Command line tool to manage HOMEINFO terminals

Usage:
    termgr list (terminals [<expr>] | class | os | domains)
    termgr (upgrade | reboot | unlock) <expr>

Options:
    -h --help     Show this screen.
    --version     Show version.
"""

from os import geteuid
from sys import stderr

from docopt import docopt

from homeinfo.lib.system import parallelize

from homeinfo.terminals.filter import TerminalFilter
from homeinfo.terminals.ctrl import RemoteController
from homeinfo.terminals.orm import Class, Domain, OS, VPN, Terminal


def list_terminals(expr):
    """Lists terminal records"""
    if expr:
        terminals = TerminalFilter(expr)
    else:
        terminals = Terminal.select().where(True)
    for terminal in terminals:
        print(terminal.id, terminal.tid, terminal.customer.id, terminal.vid,
              terminal.ipv4addr, terminal.deployed, terminal.testing,
              terminal.address, sep='\t')


def list_class():
    """Lists available classes"""
    for cls in Class.select().where(True):
        print(cls.id, cls.name, cls.full_name, cls.touch, sep='\t')


def list_os():
    """Lists available classes"""
    for os in OS.select().where(True):
        print(os.id, os.family, os.name, os.version, sep='\t')


def upgrade(terminal):
    """Upgrades a terminal"""
    if terminal.status:
        print('Upgrading', terminal)
        rc = RemoteController('termgr', terminal)
        pr = rc.execute(
            '/usr/bin/sudo', '/usr/bin/pacman', '-Syu', '--noconfirm')
        if pr:
            print('Upgraded', terminal)
        else:
            print('ERROR:', 'Failed to upgrade', terminal, file=stderr)
            print(pr, file=stderr)
    else:
        print('WARNING: Terminal', terminal, 'is offline', file=stderr)


def rm_pacman_lock(terminal):
    """Removes the pacman lockfile"""
    if terminal.status:
        print('Removing pacman lockfile on', terminal)
        rc = RemoteController('termgr', terminal)
        pr = rc.execute(
            '/usr/bin/sudo', '/usr/bin/rm', '-f ', '/var/lib/pacman/db.lck')
        if pr:
            print('Removed pacman lockfile on', terminal)
        else:
            print('ERROR:', 'Failed to remove pacman lockfile on',
                  terminal, file=stderr)
            print(pr, file=stderr)
    else:
        print('WARNING: Terminal', terminal, 'is offline', file=stderr)


def reboot(terminal):
    """Reboots a terminal"""
    if terminal.status:
        print('Rebooting terminal:', terminal)
        rc = RemoteController('termgr', terminal)
        rc.execute('/usr/bin/sudo', '/usr/bin/reboot')
    else:
        print('WARNING: Terminal', terminal, 'is offline', file=stderr)


if __name__ == '__main__':
    options = docopt(__doc__)
    if geteuid() == 0:
        print('Refusing to run as root')
        exit(3)
    else:
        expr = options['<expr>']
        if options['list']:
            if options['terminals']:
                list_terminals(expr)
            elif options['class']:
                list_class()
            elif options['os']:
                list_os()
        else:
            terminals_args = [[t] for t in TerminalFilter(expr)]
            if options['upgrade']:
                parallelize(target=upgrade, args=terminals_args)
            elif options['reboot']:
                parallelize(target=reboot, args=terminals_args)
            elif options['unlock']:
                parallelize(target=rm_pacman_lock, args=terminals_args)
