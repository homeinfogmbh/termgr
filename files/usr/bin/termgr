#! /usr/bin/env python3
"""Command line tool to manage HOMEINFO terminals

  (C) 2015-2016:  HOMEINFO - Digitale Informationssysteme GmbH

  Maintainer:     Richard Neumann <r.neumann@homeinfo.de>


Usage:
    termgr update <expr> [options]
    termgr stage <expr> [options]
    termgr upgrade <package> <expr> [options]
    termgr system-upgrade <expr> [options]
    termgr (reboot | chkres | unlock) <expr> [options]
    termgr fixpkg <expr> <pkgs>...

Options:
    -h --help       Show this screen.
    --version       Show version.
    --verbose       Be gassy.
    --undeployed    Also handle undeployed terminals.
    --user=<user>   Specify user account for SSH connections.
"""

from os import geteuid
from sys import stderr
from getpass import getuser
from os.path import basename

from homeinfo.lib.log import Logger, LogLevel
from homeinfo.lib.system import Parallelization, Watchdog

from homeinfo.terminals.ctrl import RemoteController
from homeinfo.terminals.filter import TerminalFilter
from homeinfo.terminals.orm import Terminal

from termgr.ctrl import TerminalsController
from termgr.lib.filter import deployed, online
from termgr.lib.tui import printterm


VERBOSE = False
TERMGR_USER = 'termgr'


if __name__ == '__main__':
    from docopt import docopt

    options = docopt(__doc__)
    logger = Logger(basename(__file__), level=LogLevel.INFO)

    if geteuid() == 0:
        print('Refusing to run as root')
        exit(3)
    elif getuser() != TERMGR_USER:
        print('You must be {0} to run {1}'.format(
            TERMGR_USER, __file__), file=stderr)
        exit(2)
    else:
        USER = options['--user'] if options['--user'] else TERMGR_USER
        VERBOSE = options['--verbose']

        # Get terminals generator
        if not options['<expr>']:
            terminals = Terminal.select().where(
                ~(Terminal.deployed >> None) &
                (Terminal.testing == 0))
        else:
            terminals = TerminalFilter(options['<expr>'])

        # Filter out undeployed terminals
        if not options['--undeployed']:
            terminals = deployed(terminals, logger=logger)

        # Perform selected operation
        if options['update']:
            TerminalsController.update(terminals)
        elif options['stage']:
            TerminalsController.stage(terminals)
        elif options['system-upgrade']:
            TerminalsController.upgrade(terminals)
        elif options['upgrade']:
            TerminalsController.upgrade(terminals, options['<package>'])
        elif options['reboot']:
            TerminalsController.reboot(terminals)
        elif options['unlock']:
            TerminalsController.unlock(terminals)
        elif options['chkres']:
            TerminalsController.resolution(terminals)
        elif options['fixpkg']:
            packages = options['<pkgs>'] or PackageManagerCommand.BASE_PKGS

            TerminalsController.install(terminals, packages, asexplicit=True)
