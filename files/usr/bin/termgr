#! /usr/bin/env python3
"""Command line tool to manage HOMEINFO terminals

  (C) 2015-2016:  HOMEINFO - Digitale Informationssysteme GmbH

  Maintainer:     Richard Neumann <r.neumann@homeinfo.de>


Usage:
    termgr (upgrade | reboot | unlock | chkres) <expr> [options]
    termgr fixpkg <expr> <pkgs>...
    termgr chkinitcpio <expr> [--modules] [--hooks] [--compression] [options]
    termgr chkpacman <expr> [--siglevel] [options]

Options:
    -h --help       Show this screen.
    --version       Show version.
    --verbose       Be gassy.
    --undeployed    Also handle undeployed terminals.
    --user=<user>   Specify user account for SSH connections.
"""

from os import geteuid
from sys import stderr
from getpass import getuser
from datetime import datetime, timedelta
from logging import INFO, getLogger, basicConfig
from os.path import basename

from docopt import docopt

from homeinfo.lib.system import Parallelization, Watchdog

from homeinfo.terminals.ctrl import RemoteController
from homeinfo.terminals.filter import TerminalFilter
from homeinfo.terminals.orm import Terminal

TERMGR_USER = 'termgr'
VERBOSE = False

SUDO = '/usr/bin/sudo'
PACMAN = '/usr/bin/pacman'
REBOOT = '/usr/bin/reboot'
REMOVE = '/usr/bin/rm'
GREP = '/usr/bin/grep'

BASE_PKGS = ['openvpn', 'openssh', 'wget', 'beep']


def deployed(terminals):
    """Filters only deployed terminals"""

    NULL = timedelta(0)

    for terminal in terminals:
        if terminal.deployed is None:
            logger.warning('Terminal {0} is not deployed'.format(terminal))
        elif terminal.deployed - datetime.now() > NULL:
            logger.warning(
                'Terminal {0} is not yets deployed'.format(
                    terminal))
        else:
            yield terminal


class TerminalCommand():
    """Execute command on terminal"""

    def __init__(self, cmd, *args, user=None):
        self.cmd = cmd
        self.args = args
        self.user = 'termgr' if user is None else user

    def __call__(self, terminal, user=None):
        user = self.user if user is None else user
        remote_controller = RemoteController(user, terminal)
        return remote_controller.execute(self.cmd, *self.args)

    def __iter__(self):
        yield self.cmd
        for arg in self.args:
            yield arg

    def __repr__(self):
        return ' '.join(self)


class PackageManagerCommand(TerminalCommand):
    """Automatically uses the package manager"""

    def __init__(self, packages, *args, user=None):
        super().__init__(SUDO, PACMAN, '--noconfirm', *args, user=user)
        self.packages = packages

    def __call__(self, terminal, user=None):
        user = self.user if user is None else user
        remote_controller = RemoteController(user, terminal)
        return remote_controller.execute(
            self.cmd, *chain(self.args, self.packages))

    @property
    def __str__(self):
        return ' '.join(self.packages)


UPGRADE = TerminalCommand(SUDO, PACMAN, '-Syu', '--noconfirm')
REBOOT = TerminalCommand(SUDO, REBOOT)
UNLOCK = TerminalCommand(SUDO, REMOVE, '-f ', '/var/lib/pacman/db.lck')
CHKRES = TerminalCommand('export DISPLAY=:0 \; xrandr | grep " connected"')
FIXPKGS = PackageManagerCommand(BASE_PKGS, '--asexplicit', '-S')


class CheckInitcpioConfig():
    """Checks settings inside the /etc/mkinitcpio.conf"""

    MODULES = TerminalCommand(GREP, '^MODULES=', '/etc/mkinitcpio.conf')
    HOOKS = TerminalCommand(GREP, '^HOOKS=', '/etc/mkinitcpio.conf')
    COMPRESSION = TerminalCommand(
        GREP, '^COMPRESSION=', '/etc/mkinitcpio.conf')

    def __init__(self, modules=False, hooks=False, compression=False):
        self.modules = modules
        self.hooks = hooks
        self.compression = compression

    def __call__(self, terminal, user=None):
        if self.modules:
            self.MODULES(terminal, user=user)
        if self.hooks:
            self.HOOKS(terminal, user=user)
        if self.compression:
            self.COMPRESSION(terminal, user=user)


class CheckPacmanConf():
    """Checks settings inside the /etc/pacman.conf"""

    SIG_LEVEL = TerminalCommand(GREP, '^SigLevel', '/etc/pacman.conf')

    def __init__(self, siglevel=False):
        self.siglevel = siglevel

    def __call__(self, terminal, user=None):
        if self.siglevel:
            self.SIG_LEVEL(terminal, user=user)


if __name__ == '__main__':
    options = docopt(__doc__)
    logger = getLogger(basename(__file__))
    basicConfig(level=INFO)

    if geteuid() == 0:
        print('Refusing to run as root')
        exit(3)
    elif getuser() != TERMGR_USER:
        print('You must be {0} to run {1}'.format(TERMGR_USER, __file__), file=stderr)
        exit(2)
    else:
        USER = options['--user'] if options['--user'] else TERMGR_USER
        VERBOSE = options['--verbose']

        # Get terminals generator
        if not options['<expr>']:
            terminals = Terminal.select().where(
                ~(Terminal.deployed >> None) &
                (Terminal.testing == 0))
        else:
            terminals = TerminalFilter(options['<expr>'])

        # Filter out undeployed terminals
        if not options['--undeployed']:
            terminals = deployed(terminals)

        # Perform selected operation
        if options['upgrade']:
            with Parallelization(UPGRADE, blocking=False) as para:
                with Watchdog(para.threads) as doggy:
                    para.start(terminals, single=True)
                    doggy.start()
        elif options['reboot']:
            parallelize(target=reboot, args=itemize(terminals))
        elif options['unlock']:
            parallelize(target=rm_pacman_lock, args=itemize(terminals))
        elif options['chkres']:
            for terminal in online(terminals):
                chkres(terminal)
        elif options['fixpkg']:
            packages = options['<pkgs>']
            for terminal in online(terminals):
                fixpkg(terminal, packages=packages)
        elif options['chkinitcpio']:
            modules = options['--modules']
            hooks = options['--hooks']
            compression = options['--compression']
            for terminal in online(terminals):
                chkinitcpio(
                    terminal, modules=modules, hooks=hooks,
                    compression=compression)
        elif options['chkpacman']:
            siglevel = options['--siglevel']
            for terminal in online(terminals):
                chkpacman(terminal, siglevel=siglevel)
