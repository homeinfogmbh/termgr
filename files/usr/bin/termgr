#! /usr/bin/env python3
"""Command line tool to manage HOMEINFO terminals

Usage:
    termgr (upgrade | reboot | unlock | chkres) <expr>
    termgr chkinitcpio [--modules] [--hooks] [--compression] <expr>
    termgr chkpacman [--siglevel] <expr>

Options:
    -h --help     Show this screen.
    --version     Show version.
"""

from os import geteuid
from sys import stderr
from getpass import getuser

from docopt import docopt

from homeinfo.lib.system import parallelize

from homeinfo.terminals.ctrl import RemoteController
from homeinfo.terminals.filter import TerminalFilter
from homeinfo.terminals.orm import Terminal

USER = 'termgr'


def _online_terminals(terminals):
    """Yields online terminals"""
    for terminal in terminals:
        if terminal.status:
            yield terminal
        else:
            print('WARNING: Terminal', terminal, 'is offline', file=stderr)


def upgrade(terminal):
    """Upgrades a terminal"""
    if terminal.status:
        print('Upgrading', terminal)
        rc = RemoteController('termgr', terminal)
        pr = rc.execute(
            '/usr/bin/sudo', '/usr/bin/pacman', '-Syu', '--noconfirm')
        if pr:
            print('Upgraded', terminal)
        else:
            print('ERROR:', 'Failed to upgrade', terminal, file=stderr)
            print(pr, file=stderr)
    else:
        print('WARNING: Terminal', terminal, 'is offline', file=stderr)


def reboot(terminal):
    """Reboots a terminal"""
    if terminal.status:
        print('Rebooting terminal:', terminal)
        rc = RemoteController('termgr', terminal)
        rc.execute('/usr/bin/sudo', '/usr/bin/reboot')
    else:
        print('WARNING: Terminal', terminal, 'is offline', file=stderr)


def rm_pacman_lock(terminal):
    """Removes the pacman lockfile"""
    if terminal.status:
        print('Removing pacman lockfile on', terminal)
        rc = RemoteController('termgr', terminal)
        pr = rc.execute(
            '/usr/bin/sudo', '/usr/bin/rm', '-f ', '/var/lib/pacman/db.lck')
        if pr:
            print('Removed pacman lockfile on', terminal)
        else:
            print('ERROR:', 'Failed to remove pacman lockfile on',
                  terminal, file=stderr)
            print(pr, file=stderr)
    else:
        print('WARNING: Terminal', terminal, 'is offline', file=stderr)


def chkres(terminal):
    """Checks terminal screen resolutions"""
    ctrl = RemoteController(USER, terminal)
    remote_cmd = 'export DISPLAY=:0 \; xrandr | grep " connected"'
    pr = ctrl.execute(remote_cmd)
    if pr:
        print('Resolution on: ', terminal, '\t',
              pr.stdout.decode().strip(), sep='')
    else:
        print('Could not determine resolution on: ', terminal,
              ':\n', pr.stderr.decode().strip(), sep='', file=stderr)


def chkinitcpio(terminal, modules=False, hooks=False, compression=False):
    """Print certain settings of the /etc/initcpio.conf"""
    print('Checking /etc/mkinitcpio.conf on', terminal)
    rc = RemoteController('termgr', terminal)
    if modules:
        pr = rc.execute(
            '/usr/bin/grep', '^MODULES=', '/etc/mkinitcpio.conf')
        print(pr.stdout.decode().strip())
    if hooks:
        pr = rc.execute(
            '/usr/bin/grep', '^HOOKS=', '/etc/mkinitcpio.conf')
        print(pr.stdout.decode().strip())
    if compression:
        pr = rc.execute(
            '/usr/bin/grep', '^COMPRESSION=', '/etc/mkinitcpio.conf')
        print(pr.stdout.decode().strip())


def chkpacman(terminal, siglevel=False):
    """Print certain settings of the /etc/pacman.conf"""
    print('Checking /etc/mkinitcpio.conf on', terminal)
    rc = RemoteController('termgr', terminal)
    if siglvl:
        pr = rc.execute(
            '/usr/bin/grep', '^SigLevel=', '/etc/pacman.conf')
        print(pr.stdout.decode().strip())


if __name__ == '__main__':
    options = docopt(__doc__)
    if geteuid() == 0:
        print('Refusing to run as root')
        exit(3)
    elif getuser() != USER:
        print('You must be {0} to run {1}'.format(USER, __file__))
        exit(2)
    else:
        terminals_args = [[t] for t in TerminalFilter(options['<expr>'])]
        if options['upgrade']:
            parallelize(target=upgrade, args=terminals_args)
        elif options['reboot']:
            parallelize(target=reboot, args=terminals_args)
        elif options['unlock']:
            parallelize(target=rm_pacman_lock, args=terminals_args)
        else:
            # Get terminals generator
            if not options['<expr>']:
                terminals = Terminal.select().where(
                    ~(Terminal.deployed >> None) &
                    (Terminal.testing == 0))
            else:
                terminals = TerminalFilter(options['<expr>'])
            # Check other options
            if options['chkres']:
                for terminal in _online_terminals(terminals):
                    chkres(terminal)
            elif options['chkinitcpio']:
                modules = options['--modules']
                hooks = options['--hooks']
                compression = options['--compression']
                for terminal in _online_terminals(terminals):
                    chkinitcpio(
                        terminal, modules=modules, hooks=hooks,
                        compression=compression)
            elif options['chkpacmanconf']:
                siglevel = options['--siglevel']
                for terminal in _online_terminals(terminals):
                    chkpacmanconf(terminal, siglevel=siglevel)
