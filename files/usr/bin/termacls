#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals ACLs

Usage:
    termacls get [<expr>...] [options]
    termacls set <user> [-gRras] <expr>...

Options:
    --grant, -g         Grants the provided permissions.
    --revoke, -R        Revokes the provided permissions.
    --read, -r          Enable read permission.
    --administer, -a    Enable administration permission.
    --setup, -s         Enable setup permission.
    --user=<user>       Specifies the user to filter for.
    --version           Show version.
    -h --help           Show this screen.
"""
from os.path import basename

from peewee import DoesNotExist

from fancylog import LogLevel, Logger
from homeinfo.terminals.orm import Terminal
from homeinfo.terminals.filter import parse

from termgr.orm import ACL, PermissionError, User


def getacls(terminals=None, user=None):
    """Yields ACL records for the respective user"""

    if terminals is None:
        if user is None:
            yield from ACL
        else:
            for permission in ACL.select().where(
                    ACL.user == user):
                yield permission
    else:
        if user is None:
            for terminal in terminals:
                for permission in ACL.select().where(
                        ACL.terminal == terminal):
                    yield permission
        else:
            for terminal in terminals:
                for permission in ACL.select().where(
                        (ACL.terminal == terminal) &
                        (ACL.user == user)):
                    yield permission


if __name__ == '__main__':
    from docopt import docopt

    logger = Logger(basename(__file__), level=LogLevel.INFO)
    options = docopt(__doc__)

    # Get ACLs
    if options['get']:
        if options['--user']:
            try:
                user = User.get(User.name == options['--user'])
            except DoesNotExist:
                logger.error('No such user:', options['--user'])
        else:
            user = None

        if options['<expr>']:
            terminals = parse(*options['<expr>'])
        else:
            terminals = Terminal

        for acl in getacls(terminals=terminals, user=user):
            print(acl, acl.terminal, acl.user)
    elif options['set']:
        try:
            user = User.get(User.name == options['<user>'])
        except DoesNotExist:
            logger.error('No such user:', options['<user>'])
            exit(1)

        if options['--grant'] and options['--revoke']:
            print('Error: Cannot grant and revoke at the same time.')
            exit(2)

        if options['--grant']:
            read = True if options['--read'] else None
            administer = True if options['--administer'] else None
            setup = True if options['--setup'] else None
        elif options['--revoke']:
            read = False if options['--read'] else None
            administer = False if options['--administer'] else None
            setup = False if options['--setup'] else None
        else:
            read = bool(options['--read'])
            administer = bool(options['--administer'])
            setup = bool(options['--setup'])

        for terminal in parse(*options['<expr>']):
            try:
                user.permit(
                    terminal, read=read, administer=administer, setup=setup)
            except PermissionError as e:
                logger.warning(e.msg)
