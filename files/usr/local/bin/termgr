#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals

Usage:
    termgr add <class_id> <cid> <street> <house_number> <zip_code> \
<city> [--state=<state_iso>] [--tid=<tid>]

Options:
    -h --help     Show this screen.
    --version     Show version.
"""

from os import listdir, chmod
from docopt import docopt
from homeinfo.crm.address import Address, State
from homeinfo.terminals.db import Terminal, Class, Domain
from homeinfo.terminals.config import openvpn
from os.path import join
from homeinfo.system import run

options = docopt(__doc__)


def evaluate(ok):
    """Evaluate boolean result"""
    if ok:
        print('[  ok  ]')
    else:
        print('[failed]')


def aftermath():
    """Fix stuff after operations"""
    print('Fixing VPN permissions', end='                  ')
    ok = True
    for file in listdir(openvpn['KEYS_DIR']):
        try:
            chmod(join(openvpn['KEYS_DIR'], file), 0o660)
        except:
            ok = False
    evaluate(ok)
    print('Generating /etc/hosts', end='                   ')
    evaluate(run('/usr/local/sbin/hosts.gen'))
    print('Generating OpenVPN host configurations', end='  ')
    evaluate(run('/usr/local/sbin/openvpn-clients.gen'))
    print('Restarting OpenVPN', end='                      ')
    evaluate(run('/usr/bin/systemctl restart openvpn@terminals.service'))
    print('Creating Nagios3 configurations', end='         ')
    evaluate(run('/usr/local/sbin/monitoring-clients.gen'))
    print('Restarting Nagios3', end='                      ')
    evaluate(run('/usr/bin/systemctl restart nagios3.service'))


if options['add']:
    class_id_str = options['<class_id>']
    cid_str = options['<cid>']
    tid_str = options['--tid']
    street = options['<street>']
    house_number = options['<house_number>']
    zip_code = options['<zip_code>']
    city = options['<city>']
    state_iso = options['--state']

    class_id = int(class_id_str)
    cid = int(cid_str)
    if tid_str is not None:
        desired_tid = int(tid_str)
    else:
        desired_tid = None
    tid = Terminal.gen_tid(cid, desired=desired_tid)

    class_ = Class.get(Class.id == class_id)
    domain = Domain.get(Domain.id == 1)  # TODO: Make this dynamic
    if state_iso:
        state = State.get(State._iso == state_iso)
    else:
        state = None

    addr = (street, house_number, zip_code)
    address = Address.add(city, addr=addr, state=state)

    terminal = Terminal()
    terminal.customer = cid
    terminal.tid = tid
    terminal.class_ = class_
    terminal.domain = domain
    terminal.ipv4addr = Terminal.gen_ipv4addr()
    terminal.virtual_display = None
    terminal.location = address
    terminal.deleted = False
    if terminal.gen_vpn_keys():
        print('OpenVPN keys generated')
    else:
        print('OpenVPN keys already present')
    terminal.save()
    print('Created terminal:', terminal.hostname)

aftermath()
