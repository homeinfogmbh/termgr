#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals

Usage:
    termgr add <class_id> <cid> <street> <house_number> <zip_code> \
<city> [--state=<state_iso>] [--tid=<tid>]
    termgr (upgrade | reboot) <expr>

Options:
    -h --help     Show this screen.
    --version     Show version.
"""

from os import listdir, chmod
from os.path import join
from sys import stderr

from docopt import docopt

from homeinfo.lib.system import run, evaluate
from homeinfo.crm import Address, State
from homeinfo.terminals.api import TerminalGetter
from homeinfo.terminals.config import terminals_config
from homeinfo.terminals.ctrl import RemoteController
from homeinfo.terminals.db import Terminal, Class, Domain

from termgr.lib.openvpn import OpenVPNKeyMgr
from termgr.lib.err import KeygenError
from threading import Thread

options = docopt(__doc__)


def restart_services():
    """Fix stuff after operations"""
    print('Fixing VPN permissions', end='                  ', flush=True)
    ok = True
    for file in listdir(terminals_config.openvpn['KEYS_DIR']):
        try:
            chmod(join(terminals_config.openvpn['KEYS_DIR'], file), 0o660)
        except:
            ok = False
    evaluate(ok)
    print('Generating /etc/hosts', end='                   ', flush=True)
    evaluate(run('/usr/lib/terminals/hosts.gen'))
    print('Generating OpenVPN host configurations', end='  ', flush=True)
    evaluate(run('/usr/lib/terminals/openvpn-client-config.gen'))
    print('Creating Nagios3 configurations', end='         ', flush=True)
    evaluate(run('/usr/lib/terminals/nagios-config.gen'))


def upgrade(terminal):
    """Upgrades a terminal"""
    rc = RemoteController('termgr', terminal)
    pr = rc.execute('/usr/bin/sudo', '/usr/bin/pacman', '-Syu', '--noconfirm')
    if pr:
        print('Upgraded', terminal)
    else:
        print('ERROR:', 'Failed to upgrade', terminal, file=stderr)
        print(pr, file=stderr)


def reboot(terminal):
    """Reboots a terminal"""
    rc = RemoteController('termgr', terminal)
    rc.execute('/usr/bin/sudo', '/usr/bin/reboot')


if __name__ == '__main__':
    if options['add']:
        class_id_str = options['<class_id>']
        cid_str = options['<cid>']
        tid_str = options['--tid']
        street = options['<street>']
        house_number = options['<house_number>']
        zip_code = options['<zip_code>']
        city = options['<city>']
        state_iso = options['--state']
        class_id = int(class_id_str)
        cid = int(cid_str)
        if tid_str is not None:
            desired_tid = int(tid_str)
        else:
            desired_tid = None
        tid = Terminal.gen_tid(cid, desired=desired_tid)
        class_ = Class.get(Class.id == class_id)
        domain = Domain.get(Domain.id == 1)  # TODO: Make this dynamic
        if state_iso:
            state = State.get(State._iso == state_iso)
        else:
            state = None
        addr = (street, house_number, zip_code)
        address = Address.add(city, addr=addr, state=state)
        terminal = Terminal()
        terminal.customer = cid
        terminal.tid = tid
        terminal.class_ = class_
        terminal.domain = domain
        terminal.ipv4addr = Terminal.gen_ipv4addr()
        terminal.virtual_display = None
        terminal.location = address
        terminal.deleted = None
        terminal.save()
        print('Created terminal record for host name:', terminal.hostname,
              'with id:', terminal.id)
        key_manager = OpenVPNKeyMgr(terminal)
        try:
            key_manager.generate()
        except KeygenError:
            print('OpenVPN keys already present')
        else:
            print('OpenVPN keys generated')
        restart_services()
    elif options['upgrade']:
        expr = options['<expr>']
        threads = []
        for terminal in TerminalGetter(expr):
            if terminal.status:
                print('Updating terminal:', terminal)
                thread = Thread(target=upgrade, args=[terminal])
                threads.append(thread)
                thread.start()
            else:
                print('WARNING: Terminal', terminal, 'is offline', file=stderr)
        for thread in threads:
            thread.join()
    elif options['reboot']:
        expr = options['<expr>']
        threads = []
        for terminal in TerminalGetter(expr):
            if terminal.status:
                print('Rebooting terminal:', terminal)
                thread = Thread(target=reboot, args=[terminal])
                threads.append(thread)
                thread.start()
            else:
                print('WARNING: Terminal', terminal, 'is offline', file=stderr)
        for thread in threads:
            thread.join()
