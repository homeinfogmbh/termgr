#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals ACLs

Usage:
    termacls get [<expr>...] [options]
    termacls set <user> [-GRras] <expr>...

Options:
    --grant, -G         Grants the provided permissions.
    --revoke, -R        Revokes the provided permissions.
    --read, -r          Enable read permission.
    --administer, -a    Enable administration permission.
    --setup, -s         Enable setup permission.
    --user=<user>       Specifies the user to filter for.
    --version           Show version.
    -h --help           Show this screen.
"""
from os.path import basename

from peewee import DoesNotExist

from fancylog import LogLevel, Logger
from terminallib import parse, PrintErrors, Terminal

from termgr.orm import ACL, PermissionError, User


def get_acls(terminals=None, user=None):
    """Yields ACL records for the respective user"""

    if terminals is None:
        if user is None:
            yield from ACL
        else:
            for permission in ACL.select().where(
                    ACL.user == user):
                yield permission
    else:
        if user is None:
            with PrintErrors():
                for terminal in terminals:
                    for permission in ACL.select().where(
                            ACL.terminal == terminal):
                        yield permission
        else:
            with PrintErrors():
                for terminal in terminals:
                    for permission in ACL.select().where(
                            (ACL.terminal == terminal) &
                            (ACL.user == user)):
                        yield permission


def list_acls(options, logger):
    """Lists the requested ACLs."""

    if options['--user']:
        try:
            user = User.get(User.name == options['--user'])
        except DoesNotExist:
            logger.error('No such user:', options['--user'])
    else:
        user = None

    if options['<expr>']:
        terminals = parse(*options['<expr>'])
    else:
        terminals = Terminal

    for acl in get_acls(terminals=terminals, user=user):
        print(acl, acl.terminal, acl.user)


def set_acls(options, logger):
    """Sets the requested ACLs."""

    try:
        user = User.get(User.name == options['<user>'])
    except DoesNotExist:
        logger.error('No such user:', options['<user>'])
        exit(1)

    if options['--grant'] and options['--revoke']:
        print('Error: Cannot grant and revoke at the same time.')
        exit(2)

    if options['--grant']:
        read = True if options['--read'] else None
        administer = True if options['--administer'] else None
        setup = True if options['--setup'] else None
    elif options['--revoke']:
        read = False if options['--read'] else None
        administer = False if options['--administer'] else None
        setup = False if options['--setup'] else None
    else:
        read = bool(options['--read'])
        administer = bool(options['--administer'])
        setup = bool(options['--setup'])

    with PrintErrors():
        for terminal in parse(*options['<expr>']):
            try:
                user.permit(
                    terminal, read=read, administer=administer,
                    setup=setup)
            except PermissionError as permission_error:
                logger.warning(permission_error.msg)


def main(options):
    """Runs the ACL client."""

    logger = Logger(basename(__file__), level=LogLevel.INFO)

    # Get ACLs
    if options['get']:
        list_acls(options, logger)
    elif options['set']:
        set_acls(options, logger)


if __name__ == '__main__':
    from docopt import docopt

    main(docopt(__doc__))
