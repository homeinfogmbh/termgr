#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals ACLs

Usage:
    termacls get [<expr>...] [options]
    termacls set <user> [-GRras] <expr>...

Options:
    --grant, -G         Grants the provided permissions.
    --revoke, -R        Revokes the provided permissions.
    --read, -r          Enable read permission.
    --administer, -a    Enable administration permission.
    --setup, -s         Enable setup permission.
    --user=<user>       Specifies the user to filter for.
    --version           Show version.
    -h --help           Show this screen.
"""
from os.path import basename
from sys import exit as exit_

from docopt import docopt

from fancylog import LogLevel, Logger
from terminallib import parse, PrintErrors, Terminal

from termgr.orm import ACL, PermissionError, User


def get_permissions(terminals=None, user=None):
    """Yields ACL records for the respective user"""

    terminal_expr = True if terminals is None else ACL.terminal << terminals
    user_expr = True if user is None else ACL.user == user

    with PrintErrors():
        for permission in ACL.select().where(terminal_expr & user_expr):
            yield permission


def list_acls(options, logger):
    """Lists the requested ACLs."""

    user = None
    terminals = None

    if options['--user']:
        try:
            user = User.get(User.name == options['--user'])
        except User.DoesNotExist:
            logger.error('No such user:', options['--user'])
            return 3

    if options['<expr>']:
        terminals = [terminal.id for terminal in (parse(*options['<expr>']))]

    for permission in get_permissions(terminals=terminals, user=user):
        print(permission, permission.terminal, permission.user)

    return 0


def set_acls(options, logger):
    """Sets the requested ACLs."""

    try:
        user = User.get(User.name == options['<user>'])
    except User.DoesNotExist:
        logger.error('No such user:', options['<user>'])
        return 1

    if options['--grant'] and options['--revoke']:
        print('Error: Cannot grant and revoke at the same time.')
        return 2

    if options['--grant']:
        read = True if options['--read'] else None
        administer = True if options['--administer'] else None
        setup = True if options['--setup'] else None
    elif options['--revoke']:
        read = False if options['--read'] else None
        administer = False if options['--administer'] else None
        setup = False if options['--setup'] else None
    else:
        read = bool(options['--read'])
        administer = bool(options['--administer'])
        setup = bool(options['--setup'])

    with PrintErrors():
        for terminal in parse(*options['<expr>']):
            try:
                user.permit(
                    terminal, read=read, administer=administer,
                    setup=setup)
            except PermissionError as permission_error:
                logger.warning(permission_error.msg)

    return 0


def main(options):
    """Runs the ACL client."""

    logger = Logger(basename(__file__), level=LogLevel.INFO)

    # Get ACLs
    if options['get']:
        return list_acls(options, logger)
    elif options['set']:
        return set_acls(options, logger)

    return 0


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
