#! /usr/bin/env python3
"""Command line tool to administer HOMEINFO terminals ACLs

Usage:
    termacls get [<expr>...] [options]
    termacls set <user> [-GRras] <expr>...

Options:
    --grant, -G         Grants the provided permissions.
    --revoke, -R        Revokes the provided permissions.
    --read, -r          Enable read permission.
    --administer, -a    Enable administration permission.
    --setup, -s         Enable setup permission.
    --user=<user>       Specifies the user to filter for.
    --version           Show version.
    -h --help           Show this screen.
"""
from logging import INFO, basicConfig, getLogger
from sys import exit as exit_

from docopt import docopt

from terminallib import parse, PrintErrors, Terminal

from termgr.orm import PermissionsError, User


LOG_FORMAT = '[%(levelname)s] %(name)s: %(message)s'
LOGGER = getLogger(__file__)


def list_acls(options):
    """Lists the requested ACLs."""

    if options['--user']:
        try:
            user = User.get(User.name == options['--user'])
        except User.DoesNotExist:
            LOGGER.error('No such user: %s.', options['--user'])
            return 3
    else:
        user = None

    if options['<expr>']:
        terminals = parse(*options['<expr>'])
    else:
        terminals = Terminal

    for terminal in terminals:
        permissions = user.permissions(terminal)

        if permissions is not None:
            print(permissions, terminal, user)

    return 0


def set_acls(options):
    """Sets the requested ACLs."""

    try:
        user = User.get(User.name == options['<user>'])
    except User.DoesNotExist:
        LOGGER.error('No such user: %s.', options['<user>'])
        return 1

    if options['--grant'] and options['--revoke']:
        print('Error: Cannot grant and revoke at the same time.')
        return 2

    if options['--grant']:
        read = True if options['--read'] else None
        administer = True if options['--administer'] else None
        setup = True if options['--setup'] else None
    elif options['--revoke']:
        read = False if options['--read'] else None
        administer = False if options['--administer'] else None
        setup = False if options['--setup'] else None
    else:
        read = bool(options['--read'])
        administer = bool(options['--administer'])
        setup = bool(options['--setup'])

    with PrintErrors():
        for terminal in parse(*options['<expr>']):
            try:
                user.permit(
                    terminal, read=read, administer=administer,
                    setup=setup)
            except PermissionsError as permission_error:
                LOGGER.error(permission_error)
                break

    return 0


def main(options):
    """Runs the ACL client."""

    basicConfig(level=INFO, format=LOG_FORMAT)

    if options['get']:
        return list_acls(options)
    elif options['set']:
        return set_acls(options)

    return 0


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
