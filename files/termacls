#! /usr/bin/env python3
"""termacls.

  Command line tool to administer HOMEINFO terminals ACLs.

  (C) 2015-2016:  HOMEINFO - Digitale Informationssysteme GmbH

  Maintainer:     Richard Neumann <r.neumann@homeinfo.de>


Usage:
    termacls get [<expr>...] [options]
    termacls set <user> [-GRras] <expr>...
    termacls setdefault <user> [-GRras] <customer> <class>

Options:
    --grant, -G         Grants the provided permissions.
    --revoke, -R        Revokes the provided permissions.
    --read, -r          Enable read permission.
    --administer, -a    Enable administration permission.
    --setup, -s         Enable setup permission.
    --user=<user>       Specifies the user to filter for.
    --version           Show version.
    -h --help           Show this screen.
"""
from logging import INFO, basicConfig, getLogger
from sys import exit as exit_

from docopt import docopt

from homeinfo.crm import Customer
from terminallib import get_terminals, Class

from termgr.orm import PermissionsError, User, ACL, DefaultACL


LOG_FORMAT = '[%(levelname)s] %(name)s: %(message)s'
LOGGER = getLogger(__file__)


def _get_permissions(options):
    """"Returns the respective permissions."""

    if options['--grant']:
        read = True if options['--read'] else None
        administer = True if options['--administer'] else None
        setup = True if options['--setup'] else None
    elif options['--revoke']:
        read = False if options['--read'] else None
        administer = False if options['--administer'] else None
        setup = False if options['--setup'] else None
    else:
        read = bool(options['--read'])
        administer = bool(options['--administer'])
        setup = bool(options['--setup'])

    return (read, administer, setup)


def _default_acls(terminal):
    """Yields the default ACLs for the respective terminal."""

    for default_acl in DefaultACL.select().where(
            (DefaultACL.customer == terminal.customer)
            & (DefaultACL.class_ == terminal.class_)):
        yield (default_acl.user, default_acl)


def _explicit_acls(terminal):
    """Yields the explicit ACLs for the respective terminal."""

    for acl in ACL.select().where(ACL.terminal == terminal):
        yield (acl.user, acl)


def list_acls(options):
    """Lists the requested ACLs."""

    if options['--user']:
        try:
            user = User.get(User.name == options['--user'])
        except User.DoesNotExist:
            LOGGER.error('No such user: %s.', options['--user'])
            return 3
    else:
        user = None

    terminals = get_terminals(options['<expr>'])

    for terminal in terminals:
        if user is not None:
            permissions = user.permissions(terminal)

            if permissions is not None:
                print(permissions, terminal, user)
        else:
            permissions_ = dict(_default_acls(terminal))
            explicit_permissions = dict(_explicit_acls(terminal))
            permissions_.update(explicit_permissions)

            for user, permissions in permissions_.items():
                print(permissions, terminal, user)

    return 0


def set_acls(options):
    """Sets the requested ACLs."""

    try:
        user = User.get(User.name == options['<user>'])
    except User.DoesNotExist:
        LOGGER.error('No such user: %s.', options['<user>'])
        return 1

    if options['--grant'] and options['--revoke']:
        LOGGER.error('Error: Cannot grant and revoke at the same time.')
        return 2

    read, administer, setup = _get_permissions(options)

    for terminal in get_terminals(options['<expr>']):
        try:
            user.permit(
                terminal, read=read, administer=administer,
                setup=setup)
        except PermissionsError as permission_error:
            LOGGER.error(permission_error)
            break

    return 0


def set_default(options):
    """Sets default ACLs."""

    try:
        user = User.get(User.name == options['<user>'])
    except User.DoesNotExist:
        LOGGER.error('No such user: %s.', options['<user>'])
        return 3

    try:
        customer = Customer.find(options['<customer>']).get()
    except Customer.DoesNotExist:
        LOGGER.error('No such customer: %s.', options['<customer>'])
        return 2

    try:
        class_id = int(options['<class>'])
    except ValueError:
        class_expr = (
            (Class.full_name == options['<class>'])
            | (Class.name == options['<class>']))
    else:
        class_expr = Class.id == class_id

    try:
        class_ = Class.get(class_expr)
    except Class.DoesNotExist:
        LOGGER.error('No such class: %s.', options['<class>'])
        return 1

    try:
        default_acl = DefaultACL.get(
            (DefaultACL.user == user) & (DefaultACL.customer == customer)
            & (DefaultACL.class_ == class_))
    except DefaultACL.DoesNotExist:
        default_acl = DefaultACL()
        default_acl.user = user
        default_acl.customer = customer
        default_acl.class_ = class_

    read, administer, setup = _get_permissions(options)

    if read is not None:
        default_acl.read = read

    if administer is not None:
        default_acl.administer = administer

    if setup is not None:
        default_acl.setup = setup

    default_acl.save()
    return 0


def main(options):
    """Runs the ACL client."""

    basicConfig(level=INFO, format=LOG_FORMAT)

    if options['get']:
        return list_acls(options)
    elif options['set']:
        return set_acls(options)
    elif options['setdefault']:
        return set_default(options)

    return 0


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
