#! /usr/bin/env python3
"""termgr.

  Command line tool to manage HOMEINFO terminals.

  (C) 2015-2016:  HOMEINFO - Digitale Informationssysteme GmbH

  Maintainer:     Richard Neumann <r.neumann@homeinfo.de>


Usage:
    termgr update <expr> [options]
    termgr stage <expr> [options]
    termgr sync <expr> <package>... [--asexplicit] [options]
    termgr system-upgrade <expr> [options]
    termgr (reboot | chkres | unlock) <expr> [options]

Options:
    -h --help       Show this screen.
    --version       Show version.
    --verbose       Be gassy.
    --undeployed    Also handle undeployed terminals.
    --user=<user>   Specify user account for SSH connections.
"""
from getpass import getuser
from os import geteuid
from sys import stderr

from fancylog import DEFAULT_ANIMATION, TTYAnimation, TTYAnimator
from syslib import Parallelization
from terminallib import parse, PrintErrors, Terminal

from termgr.ctrl import TerminalsController


TERMGR_USER = 'termgr'


def main(options):
    """Runs the terminal manager."""

    if geteuid() == 0:
        print('Refusing to run as root')
        exit(3)
    elif getuser() != TERMGR_USER:
        print('You must be', TERMGR_USER, 'to run', __file__, file=stderr)
        exit(2)
    else:
        # Get terminals generator.
        if not options['<expr>']:
            terminals = Terminal.select().where(
                ~(Terminal.deployed >> None) &
                (Terminal.testing == 0))
        else:
            with PrintErrors():
                terminals = tuple(parse(options['<expr>']))

        # Filter out undeployed terminals.
        if not options['--undeployed']:
            terminals = (t for t in terminals if t.deployed)

        ctrl = TerminalsController()

        # Perform selected operation.
        if options['update']:
            animation = TTYAnimation(
                'Updating {}: {}', DEFAULT_ANIMATION.stages,
                DEFAULT_ANIMATION.end)

            with Parallelization(ctrl.update, terminals, single=True) as para:
                with TTYAnimator(para, animation=animation):
                    para.wait()

            for terminal, *_ in para.failures:
                print('Failed to update:', str(terminal))
        elif options['stage']:
            animation = TTYAnimation(
                'Staging {}: {}', DEFAULT_ANIMATION.stages,
                DEFAULT_ANIMATION.end)

            with Parallelization(ctrl.stage, terminals, single=True) as para:
                with TTYAnimator(para, animation=animation):
                    para.wait()

            for terminal, *_ in para.failures:
                print('Failed to stage:', str(terminal))
        elif options['sync']:
            pkgs = options['<package>']
            asexplicit = options['--asexplicit']
            install = ctrl.install(*pkgs, asexplicit=asexplicit)
            animation = TTYAnimation(
                'Syncing {}: {}', DEFAULT_ANIMATION.stages,
                DEFAULT_ANIMATION.end)

            with Parallelization(install, terminals, single=True) as para:
                with TTYAnimator(para, animation=animation):
                    para.wait()

            for terminal, *_ in para.failures:
                print('Failed to sync:', str(terminal))
        elif options['system-upgrade']:
            animation = TTYAnimation(
                'Upgrading {}: {}', DEFAULT_ANIMATION.stages,
                DEFAULT_ANIMATION.end)

            with Parallelization(ctrl.upgrade, terminals, single=True) as para:
                with TTYAnimator(para, animation=animation):
                    para.wait()

            for terminal, *_ in para.failures:
                print('Failed to upgrade:', str(terminal))
        elif options['reboot']:
            animation = TTYAnimation(
                'Rebooting {}: {}', DEFAULT_ANIMATION.stages,
                DEFAULT_ANIMATION.end)

            with Parallelization(ctrl.reboot, terminals, single=True) as para:
                with TTYAnimator(para, animation=animation):
                    para.wait()
        elif options['chkres']:
            animation = TTYAnimation(
                'Checking resolution {}: {}', DEFAULT_ANIMATION.stages,
                DEFAULT_ANIMATION.end)

            with Parallelization(ctrl.chkres, terminals, single=True) as para:
                with TTYAnimator(para, animation=animation):
                    para.wait()
        elif options['unlock']:
            animation = TTYAnimation(
                'Unlocking {}: {}', DEFAULT_ANIMATION.stages,
                DEFAULT_ANIMATION.end)

            with Parallelization(ctrl.unlock, terminals, single=True) as para:
                with TTYAnimator(para, animation=animation):
                    para.wait()

            for terminal, *_ in para.failures:
                print('Failed to unlock:', str(terminal))


if __name__ == '__main__':
    from docopt import docopt
    main(docopt(__doc__))
