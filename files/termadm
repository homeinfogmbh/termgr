#! /usr/bin/env python3
"""termadm.

  Command line tool to administer HOMEINFO terminals.

  (C) 2015-2016:  HOMEINFO - Digitale Informationssysteme GmbH

  Maintainer:     Richard Neumann <r.neumann@homeinfo.de>


Usage:
    termadm add [options]
    termadm deploy <id> <street> <house_number> <zip_code> <city> [<customer>]
    termadm undeploy <id>
    termadm notify [<account>...]
    termadm reload

Options:
    --key=<key>                 Explicitly specifies an OpenVPN key to be used.
    --mtu=<mtu>                 Specifies the desired MTU size.
    --manufacturer=<cid>        Specifies the hardware manufacturer.
    --serial-number=<sn>        Specifies the serial number of the hardware.
    --model=<model>             Specifies the hardware model.
    --os=<os>                   Specifies the termianl OS [default: 1].
    --state=<state_iso>         Specifies the respective state.
    --no-reload                 Do not reload services after terminal creation.
    --version                   Show version.
    -h --help                   Show this screen.
"""
from functools import partial
from getpass import getuser
from logging import INFO, basicConfig, getLogger
from os import geteuid
from sys import exit as exit_

from docopt import docopt

from his import Account
from mdb import Address, Company, Customer
from syslib import run, evaluate, script
from terminallib import TerminalConfigError
from terminallib import Deployment
from terminallib import OpenVPN
from terminallib import OperatingSystem
from terminallib import System

from termgr.config import LOG_FORMAT
from termgr.notify import notify_accounts


LOGGER = getLogger(__file__)
TERMGR_USER = 'termgr'
NAGIOSCFG_GEN = '/usr/local/bin/nagioscfg-gen'
BINDCFG_GEN = '/usr/local/bin/bindcfg-gen'
OPENVPNCFG_GEN = '/usr/local/bin/openvpncfg-gen'


def _get_accounts(accounts):
    """Yields the respective users."""

    for account in accounts:
        try:
            yield Account.get(Account.name == account)
        except Account.DoesNotExist:
            LOGGER.warning('No such account: %s.', account)


def _customer_by_name(name):
    """Returns a customer by its name."""

    select = (Company.name == name) | (Company.abbreviation == name)
    customer = Customer.select().join(Company).where(select).get()
    LOGGER.info('Found customer by name: %s.', customer)
    return customer


def _customer_by_id(ident):
    """Returns a customer by its ID."""

    return Customer[ident]


def _get_customer(string):
    """Returns the respecive customer."""

    if string is None:
        return None

    try:
        ident = int(string)
    except ValueError:
        function = partial(_customer_by_name, string)
    else:
        function = partial(_customer_by_id, ident)

    try:
        return function()
    except Customer.DoesNotExist:
        LOGGER.error('No such customer: %i.', string)
        exit(2)


def _get_system(string):
    """Returns the respective system."""

    try:
        ident = int(string)
    except ValueError:
        LOGGER.error('Invalid system ID: %s.', string)
        exit(1)

    try:
        return System[ident]
    except System.DoesNotExist:
        LOGGER.error('No such system: %i.', ident)
        exit(2)


def update_config():
    """Fix stuff after operations."""

    print('Generating bind9 configuration', end='          ', flush=True)
    bind_ok = run(BINDCFG_GEN)
    evaluate(bind_ok)
    print('Generating OpenVPN host configurations', end='  ', flush=True)
    openvpn_ok = run(OPENVPNCFG_GEN)
    evaluate(openvpn_ok)
    print('Creating Nagios3 configurations', end='         ', flush=True)
    nagios_ok = run((NAGIOSCFG_GEN, '--restart'))
    evaluate(nagios_ok)

    if bind_ok and openvpn_ok and nagios_ok:
        exit(0)

    exit(1)


def add(options):
    """Adds a new system."""

    operating_system = options['--os']

    try:
        operating_system = OperatingSystem(operating_system)
    except ValueError:
        LOGGER.error('No such operating system: %s.', operating_system)
        exit(1)

    manufacturer = _get_customer(options['--manufacturer'])
    serial_number = options['--serial-number']
    model = options['--model']
    vpn_key = options['--key'] or None
    mtu = options['--mtu']

    if mtu is not None:
        try:
            mtu = int(mtu)
        except ValueError:
            LOGGER.error('Invalid MTU: %s.', mtu)
            exit(2)

    if vpn_key is not None:
        LOGGER.warning('Divergent OpenVPN key specified: "%s"!', vpn_key)

    try:
        openvpn = OpenVPN.add(key=vpn_key, mtu=mtu)
    except TerminalConfigError as tce:
        LOGGER.error(tce)
        exit(3)

    system = System(
        openvpn=openvpn, manufacturer=manufacturer,
        operating_system=operating_system, serial_number=serial_number,
        model=model)
    system.save()
    LOGGER.info('Added system: %i', system.id)

    if not options['--no-reload']:
        update_config()

    exit(0)


def deploy(options):
    """Deploys a system."""

    system = _get_system(options['<id>'])
    customer = _get_customer(options['<customer>'])
    street = options['<street>']
    house_number = options['<house_number>']
    zip_code = options['<zip_code>']
    city = options['<city>']
    address = Address.add_by_address((street, house_number, zip_code, city))
    address.save()

    try:
        deployment = Deployment.get(
            (Deployment.customer == customer)
            & (Deployment.address == address))
    except Deployment.DoesNotExist:
        deployment = Deployment(customer=customer, address=address)
        deployment.save()

    if system.relocate(deployment):
        exit(0)

    exit(1)


def undeploy(options):
    """Removed deployment of terminals."""

    system = _get_system(options['<id>'])

    if system.relocate(None):
        exit(0)

    exit(1)


def notify(options):
    """Notifies the respective users."""

    if getuser() != TERMGR_USER and geteuid() != 0:
        # Because only termgr and root can read the certificates.
        LOGGER.error('You must be termgr or root to notify users.')
        exit(3)

    if options['<account>']:
        accounts = tuple(_get_accounts(options['<account>']))
    else:
        accounts = None

    notify_accounts(accounts=accounts)
    exit(0)


@script
def main(options):
    """Runs the terminal administration CLI."""

    basicConfig(level=INFO, format=LOG_FORMAT)

    # Bail out iff reload of services
    # is required, but we are not root.
    if options['add'] or options['deploy'] or options['undeploy']:
        if not options['--no-reload'] and geteuid() != 0:
            LOGGER.error('You must be root to update the related services.')
            exit(3)

    if options['add']:
        add(options)
    elif options['deploy']:
        deploy(options)
    elif options['undeploy']:
        undeploy(options)
    elif options['reload']:
        update_config()
    elif options['notify']:
        notify(options)

    exit(0)


if __name__ == '__main__':
    exit_(main(docopt(__doc__)))
